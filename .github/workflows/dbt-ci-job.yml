# .github/workflows/dbt-ci-job.yml
name: dbt CI

on:
  workflow_call:

permissions:
  contents: read
  actions: read

jobs:
  dbt-build:
    runs-on: ubuntu-latest
    env:
      DBT_PROFILES_DIR: "."

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dbt + deps
        run: |
          python -m pip install --upgrade pip
          pip install "urllib3<2.0"
          pip install "dbt-core==1.10.10" dbt-duckdb duckdb

      - name: dbt deps
        run: dbt deps

      # ---------- download artifacts from main (no cache) ----------
      - name: Download state (manifest/catalog) from main
        uses: dawidd6/action-download-artifact@v3
        with:
          # Use the workflow FILE PATH to avoid 404s:
          workflow: .github/workflows/main-state.yml
          branch: main
          name: dbt-state-artifacts
          path: previous-state
          if_no_artifact_found: warn

      - name: Download DuckDB database from main
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: .github/workflows/main-state.yml
          branch: main
          name: workshop-db
          path: .
          if_no_artifact_found: warn

      # ---------- resolve state dir (flat or nested) ----------
      - name: Resolve STATE_DIR
        id: state-dir
        shell: bash
        run: |
          if [ -f previous-state/manifest.json ]; then
            echo "STATE_DIR=previous-state" >> $GITHUB_OUTPUT
          elif [ -f previous-state/target/manifest.json ]; then
            echo "STATE_DIR=previous-state/target" >> $GITHUB_OUTPUT
          else
            echo "STATE_DIR=" >> $GITHUB_OUTPUT
          fi

      # Prime ./target for partial parsing (keeps dbt quiet about saved manifest)
      - name: Prime partial parsing with downloaded state
        if: ${{ steps.state-dir.outputs.STATE_DIR != '' }}
        shell: bash
        run: |
          rm -rf target
          mkdir -p target
          rsync -a "${{ steps.state-dir.outputs.STATE_DIR }}/" target/

      # ---------- build: selective if changes, skip if none, full if no state ----------
      - name: dbt build (changes only; skip if none; full if no state)
        shell: bash
        run: |
          STATE="${{ steps.state-dir.outputs.STATE_DIR }}"
          if [ -n "$STATE" ]; then
            # List modified nodes vs main (no deps)
            CHANGED=$(dbt ls --state "$STATE" --select state:modified --output name | wc -l)
            if [ "$CHANGED" -gt 0 ]; then
              echo "üîÑ $CHANGED modified nodes ‚Üí selective build (defer to downloaded DB)"
              # Ensure DB is present for deferral; if not, fail clearly
              if [ ! -f workshop.duckdb ]; then
                echo "‚ùå Expected workshop.duckdb for --defer but it wasn't downloaded."
                exit 1
              fi
              dbt build --select state:modified+ state:new+ --exclude resource_type:seed --defer --state "$STATE"


            else
              echo "‚úÖ No graph-impacting changes vs main; skipping dbt build."
            fi
          else
            echo "üöÄ No state available ‚Üí full build"
            dbt build
          fi

      - name: dbt docs generate
        run: dbt docs generate

      - name: Upload pipeline results (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dbt-pipeline-results
          path: |
            workshop.duckdb
            target/
            logs/
          retention-days: 7
