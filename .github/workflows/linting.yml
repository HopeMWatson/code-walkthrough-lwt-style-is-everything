name: Lint SQL with SQLFluff (dbt templater)

on:
  pull_request:
  push:
    branches: [main]

jobs:
  sqlfluff-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.sqlfluff') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dbt + SQLFluff
        env:
          DBT_VERSION: "1.10.10"
        run: |
          echo "⬇️ Installing dbt $DBT_VERSION..."
          python -m pip install --upgrade pip --quiet
          pip install "urllib3<2.0" --quiet   # keep requests stack stable/noisy
          pip install "dbt-core==${DBT_VERSION}" dbt-duckdb --quiet
          pip install "sqlfluff>=3.0.0" "sqlfluff-templater-dbt>=3.0.0" --quiet
          sqlfluff version
          dbt --version

      - name: Create temporary DuckDB profile (in-memory)
        env:
          DBT_PROFILES_DIR: $HOME/.dbt
        run: |
          set -e
          mkdir -p "$DBT_PROFILES_DIR"
          # Read 'profile:' from dbt_project.yml, default to 'default'
          PROFILE_NAME=$(python - <<'PY'
import pathlib, yaml
name = "default"
p = pathlib.Path("dbt_project.yml")
if p.exists():
    with p.open() as f:
        try:
            y = yaml.safe_load(f) or {}
            name = y.get("profile") or name
        except Exception:
            pass
print(name)
PY
)
          cat > "$DBT_PROFILES_DIR/profiles.yml" <<YML
${PROFILE_NAME}:
  target: ci
  outputs:
    ci:
      type: duckdb
      path: ":memory:"
YML
          echo "Using dbt profile '$PROFILE_NAME' with in-memory DuckDB."

      - name: Run SQLFluff lint (dbt templater)
        env:
          DBT_PROFILES_DIR: $HOME/.dbt
        run: |
          set -e
          # Lint source files (not compiled artifacts) and annotate results in PR UI
          sqlfluff lint models macros seeds snapshots --templater dbt --format github-annotation

      # OPTIONAL: Only lint changed files in PRs (faster). Uncomment to use.
      # - name: Lint only changed files (PRs)
      #   if: github.event_name == 'pull_request'
      #   env:
      #     DBT_PROFILES_DIR: $HOME/.dbt
      #   run: |
      #     set -e
      #     git fetch origin ${{ github.base_ref }} --depth=1 || true
      #     CHANGED=$(git diff --name-only --diff-filter=ACMR origin/${{ github.base_ref }}...HEAD \
      #       | grep -E '^(models|macros|seeds|snapshots)/.*\.(sql|sql.j2|jinja)$' || true)
      #     if [ -z "$CHANGED" ]; then
      #       echo "No changed SQL/Jinja files."
      #     else
      #       echo "Linting changed files:"
      #       echo "$CHANGED"
      #       sqlfluff lint $CHANGED --templater dbt --format github-annotation
      #     fi
